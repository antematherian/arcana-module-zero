#!/usr/bin/python3
"""
Arcana is an automated sanity-checking tool for Funtoo
based distributions. 

The aim of this module (module zero) is to run sanity
checks against the Funtoo portage tree.

The development version aims to work with the latest
development implementation of the Funtoo portage tree.

Specific slots will deal with different versions of
the portage tree: if the Funtoo portage tree changes
in a major way, this will be reflected by a slot update

Subslots will be used to tune the module behavior 
that might not be compatible with external scripts,
but should be beneficial overall. 
"""
import os, sys, subprocess
import json

#The global VERSION variable is required for proper 
#ebuild slotting behavior on *too systems. Failure
#to set the VERSION variable to the correct value
#referenced by the ebuild merging the forked branch
#will cause unexpected behavior. Don't mess this up.

VERSION = "9999"

#The below value of MODULEID should match the ${PN} 
#of the ebuild merging this module. Failure to set
#this correctly will result in unexpected behavior.

MODULEID = "arcana-module-zero"

#Portage-specific values that should be useful

SLOT = "9999"
SUBSLOT = "-1" 

def version():
    """Output an int matching the development version of the module"""
    print("{} version {}".format(MODULEID, VERSION))

def fullversion():
    version()
    print("SLOT: {}".format(SLOT))
    print("SUBSLOT: {}".format(SUBSLOT))

cli_mapping = {
    "version" : [version, "-v", "--version", "version"],
    "fullversion" : [fullversion, "-vv", "--fullversion", "fullversion"],
}

def help():
    for function in cli_mapping.keys():
        print(cli_mapping[function])

def main():
    if len(sys.argv) == 1:
        help()
        sys.exit(1)
    else:
        for func in cli_mapping.keys():
            for altopt in range(1, len(cli_mapping[func]) ):
                if sys.argv[1] == cli_mapping[func][altopt]:
                    cli_mapping[func][0]()
                    sys.exit(1)

if __name__ == "__main__":
    main()
